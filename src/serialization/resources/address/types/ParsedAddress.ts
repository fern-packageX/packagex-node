/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { PackageX } from "@fern-api/packagex";
import * as core from "../../../../core";

export const ParsedAddress: core.serialization.ObjectSchema<serializers.ParsedAddress.Raw, PackageX.ParsedAddress> =
    core.serialization.object({
        id: core.serialization.lazy(async () => (await import("../../..")).AddressId),
        hash: core.serialization.string(),
        line1: core.serialization.string(),
        line2: core.serialization.string(),
        city: core.serialization.string(),
        state: core.serialization.string(),
        stateCode: core.serialization.property("state_code", core.serialization.string()),
        country: core.serialization.string(),
        countryCode: core.serialization.property("country_code", core.serialization.string()),
        postalCode: core.serialization.property("postal_code", core.serialization.string()),
        formattedAddress: core.serialization.property("formatted_address", core.serialization.string()),
        textarea: core.serialization.string(),
        timezone: core.serialization.string(),
        verified: core.serialization.boolean(),
    });

export declare namespace ParsedAddress {
    interface Raw {
        id: serializers.AddressId.Raw;
        hash: string;
        line1: string;
        line2: string;
        city: string;
        state: string;
        state_code: string;
        country: string;
        country_code: string;
        postal_code: string;
        formatted_address: string;
        textarea: string;
        timezone: string;
        verified: boolean;
    }
}
