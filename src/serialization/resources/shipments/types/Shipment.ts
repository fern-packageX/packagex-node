/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { PackagexApi } from "@fern-api/packagex";
import * as core from "../../../../core";

export const Shipment: core.serialization.ObjectSchema<serializers.Shipment.Raw, PackagexApi.Shipment> =
    core.serialization.object({
        amount: core.serialization.number(),
        billedAmount: core.serialization.property("billed_amount", core.serialization.number()),
        provider: core.serialization.lazyObject(async () => (await import("../../..")).Provider),
        createdAt: core.serialization.property("created_at", core.serialization.number()),
        updatedAt: core.serialization.property("updated_at", core.serialization.number()),
        currency: core.serialization.lazy(async () => (await import("../../..")).Currency),
        estimatedDelivery: core.serialization.property("estimated_delivery", core.serialization.number()),
        hasIssue: core.serialization.property("has_issue", core.serialization.boolean()),
        id: core.serialization.string(),
        status: core.serialization.string(),
        leadTimeHours: core.serialization.property("lead_time_hours", core.serialization.number()),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        paid: core.serialization.boolean(),
        parcels: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Parcel)),
        paymentReference: core.serialization.property("payment_reference", core.serialization.string()),
        purchasedRate: core.serialization.property(
            "purchased_rate",
            core.serialization.lazyObject(async () => (await import("../../..")).Rate)
        ),
        rates: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Rate)),
        recipient: core.serialization.lazyObject(async () => (await import("../../..")).Recipient),
        sender: core.serialization.lazyObject(async () => (await import("../../..")).Sender),
        pickupAt: core.serialization.property("pickup_at", core.serialization.number()),
        organizationId: core.serialization.property("organization_id", core.serialization.string()),
        labelUrl: core.serialization.property("label_url", core.serialization.string()),
        invoiceId: core.serialization.property("invoice_id", core.serialization.string()),
        trackingInteger: core.serialization.property("tracking_integer", core.serialization.string()),
        trackingUrl: core.serialization.property("tracking_url", core.serialization.string()),
        feedback: core.serialization.lazyObject(async () => (await import("../../..")).ShipmentFeedback),
        trackingUpdates: core.serialization.property(
            "tracking_updates",
            core.serialization.list(
                core.serialization.lazyObject(async () => (await import("../../..")).TrackingUpdate)
            )
        ),
        latestLocation: core.serialization.property(
            "latest_location",
            core.serialization.lazyObject(async () => (await import("../../..")).LatestLocation)
        ),
    });

export declare namespace Shipment {
    interface Raw {
        amount: number;
        billed_amount: number;
        provider: serializers.Provider.Raw;
        created_at: number;
        updated_at: number;
        currency: serializers.Currency.Raw;
        estimated_delivery: number;
        has_issue: boolean;
        id: string;
        status: string;
        lead_time_hours: number;
        metadata: Record<string, unknown>;
        paid: boolean;
        parcels: serializers.Parcel.Raw[];
        payment_reference: string;
        purchased_rate: serializers.Rate.Raw;
        rates: serializers.Rate.Raw[];
        recipient: serializers.Recipient.Raw;
        sender: serializers.Sender.Raw;
        pickup_at: number;
        organization_id: string;
        label_url: string;
        invoice_id: string;
        tracking_integer: string;
        tracking_url: string;
        feedback: serializers.ShipmentFeedback.Raw;
        tracking_updates: serializers.TrackingUpdate.Raw[];
        latest_location: serializers.LatestLocation.Raw;
    }
}
