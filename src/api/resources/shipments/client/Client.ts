/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PackagexApi } from "@fern-api/packagex";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Shipments {
    interface Options {
        environment?: environments.PackagexApiEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Shipments {
    constructor(private readonly options: Shipments.Options) {}

    /**
     * Gets shipping rates for a new shipment.
     */
    public async create(request: PackagexApi.CreateShipmentRequest): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackagexApiEnvironment.Production, "/v1/shipments"),
            method: "POST",
            headers: {
                "PX-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.CreateShipmentRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body as serializers.ShipmentResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists shipments up to the specified limit starting at the specified page
     */
    public async list(): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackagexApiEnvironment.Production, "/v1/shipments"),
            method: "GET",
            headers: {
                "PX-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body as serializers.ShipmentResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a specific shipment
     */
    public async retrieve(shipment: string): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/shipments/${shipment}`
            ),
            method: "GET",
            headers: {
                "PX-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body as serializers.ShipmentResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Purchases a shipping label
     */
    public async purchase(shipment: string): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/shipments/${shipment}`
            ),
            method: "POST",
            headers: {
                "PX-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body as serializers.ShipmentResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
