/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PackagexApi } from "@fern-api/packagex";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Address {
    interface Options {
        environment?: environments.PackagexApiEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Address {
    constructor(private readonly options: Address.Options) {}

    /**
     * Allows users to submit a piece of an address string and have the API respond with the best possible options
     */
    public async autocomplete(
        request: PackagexApi.AutocompleteAddressRequest
    ): Promise<PackagexApi.AutocompleteAddressResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                "/v1/address/autocomplete"
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.AutocompleteAddressRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.AutocompleteAddressResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Takes addresses in multiple different formats and returns the address in the PackageX address mode.
     */
    public async parse(request: PackagexApi.ParseAddressRequest): Promise<PackagexApi.ParseAddressResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                "/v1/address/parse"
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.ParseAddressRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ParseAddressResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
