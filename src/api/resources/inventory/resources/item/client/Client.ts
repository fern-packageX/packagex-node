/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { PackageX } from "@fern-api/packagex";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Item {
    interface Options {
        environment?: environments.PackageXEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Item {
    constructor(private readonly options: Item.Options) {}

    public async create(request: PackageX.inventory.CreateItemRequest): Promise<PackageX.inventory.ItemResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackageXEnvironment.Production, "/v1/items"),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.CreateItemRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.ItemResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackageXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackageXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackageXTimeoutError();
            case "unknown":
                throw new errors.PackageXError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates a single item. When updating inventory, you increment and decrement quantities by passing in positive and negative integers. Lastly, you can optionally provide a layout value to be more specific about the item's exact whereabouts in that location
     */
    public async update(
        itemId: PackageX.inventory.ItemId,
        request: PackageX.inventory.UpdateItemRequest = {}
    ): Promise<PackageX.inventory.ItemResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackageXEnvironment.Production,
                `/v1/items/${await serializers.inventory.ItemId.jsonOrThrow(itemId)}`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.UpdateItemRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.ItemResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackageXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackageXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackageXTimeoutError();
            case "unknown":
                throw new errors.PackageXError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a single item
     */
    public async retrieve(itemId: string): Promise<PackageX.inventory.ItemResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackageXEnvironment.Production,
                `/v1/items/${itemId}`
            ),
            method: "GET",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.inventory.ItemResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackageXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackageXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackageXTimeoutError();
            case "unknown":
                throw new errors.PackageXError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets all items
     */
    public async list(): Promise<PackageX.inventory.ListItemResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackageXEnvironment.Production, "/v1/items"),
            method: "GET",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.inventory.ListItemResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackageXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackageXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackageXTimeoutError();
            case "unknown":
                throw new errors.PackageXError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * deletes a single item
     */
    public async delete(itemId: PackageX.inventory.ItemId): Promise<PackageX.Response> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackageXEnvironment.Production,
                `/v1/items/${await serializers.inventory.ItemId.jsonOrThrow(itemId)}`
            ),
            method: "DELETE",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackageXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackageXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackageXTimeoutError();
            case "unknown":
                throw new errors.PackageXError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
