/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { PackagexApi } from "@fern-api/packagex";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Fulfillment {
    interface Options {
        environment?: environments.PackagexApiEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Fulfillment {
    constructor(private readonly options: Fulfillment.Options) {}

    /**
     * Add the required inventory that needs to be shipped to the desired recipient from your specified location.
     */
    public async create(
        request: PackagexApi.inventory.CreateFulfillmentRequest
    ): Promise<PackagexApi.inventory.FulfillmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackagexApiEnvironment.Production, "/v1/fulfillment"),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.CreateFulfillmentRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.FulfillmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Add the box or boxes into which you're going to pack the inventory items.
     */
    public async createParcel(
        fulfillmentId: PackagexApi.inventory.FulfillmentId,
        request: PackagexApi.inventory.CreateParcelRequest
    ): Promise<PackagexApi.inventory.FulfillmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/fulfillment/${await serializers.inventory.FulfillmentId.jsonOrThrow(fulfillmentId)}/parcels`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.CreateParcelRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.FulfillmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Pack the items into the parcel(s) that you have added.
     */
    public async packParcel(
        fulfillmentId: PackagexApi.inventory.FulfillmentId,
        parcelId: PackagexApi.inventory.ParcelId,
        request: PackagexApi.inventory.PackParcelRequest
    ): Promise<PackagexApi.inventory.FulfillmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/fulfillment/${await serializers.inventory.FulfillmentId.jsonOrThrow(
                    fulfillmentId
                )}/parcels/${await serializers.inventory.ParcelId.jsonOrThrow(parcelId)}`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.PackParcelRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.FulfillmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * If you decide to delete the parcel from the fulfillment, any inventory attributed to that parcel will be removed and reset.
     */
    public async deleteParcel(
        fulfillmentId: PackagexApi.inventory.FulfillmentId,
        parcelId: PackagexApi.inventory.ParcelId
    ): Promise<PackagexApi.Response> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/fulfillment/${await serializers.inventory.FulfillmentId.jsonOrThrow(
                    fulfillmentId
                )}/parcels/${await serializers.inventory.ParcelId.jsonOrThrow(parcelId)}`
            ),
            method: "POST",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Mark the fulfillment as packed.
     */
    public async update(
        fulfillmentId: PackagexApi.inventory.FulfillmentId,
        request: PackagexApi.inventory.UpdateFulfillmentRequest
    ): Promise<PackagexApi.inventory.FulfillmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/fulfillment/${await serializers.inventory.FulfillmentId.jsonOrThrow(fulfillmentId)}`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.inventory.UpdateFulfillmentRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.inventory.FulfillmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
