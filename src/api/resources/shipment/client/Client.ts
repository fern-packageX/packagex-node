/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PackagexApi } from "@fern-api/packagex";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Shipment {
    interface Options {
        environment?: environments.PackagexApiEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Shipment {
    constructor(private readonly options: Shipment.Options) {}

    /**
     * There are three pieces of information we require to get rates: sender,
     * recipient, and parcel. There are also some additional options you can
     * pass in to configure the shipment.
     *
     */
    public async getRates(request: PackagexApi.GetShipmentRatesRequest): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackagexApiEnvironment.Production, "/v1/shipments"),
            method: "POST",
            contentType: "application/json",
            body: await serializers.GetShipmentRatesRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Purchase Shipment Rate
     */
    public async purchase(
        shipmentId: PackagexApi.ShipmentId,
        request: PackagexApi.PurchaseShipmentRateRequest
    ): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/shipments/${await serializers.ShipmentId.jsonOrThrow(shipmentId)}`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.PurchaseShipmentRateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * After you already fetched rates, you can also fetch new rates. You'll want to do this if:
     *   - Your rate has expired because the rates_generated_at is more than 15 minutes from now.
     *   - You want to update your options that you added into the shipment.
     *
     */
    public async refetchRates(
        shipmentId: PackagexApi.ShipmentId,
        request: PackagexApi.RefetchShipmentRatesRequest = {}
    ): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/shipments/${await serializers.ShipmentId.jsonOrThrow(shipmentId)}/refetch`
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.RefetchShipmentRatesRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists shipments up to the specified limit starting at the specified page
     */
    public async list(): Promise<PackagexApi.ListShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PackagexApiEnvironment.Production, "/v1/shipments"),
            method: "GET",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.ListShipmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a specific shipment
     */
    public async retrieve(shipmentId: PackagexApi.ShipmentId): Promise<PackagexApi.ShipmentResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PackagexApiEnvironment.Production,
                `/v1/shipments/${await serializers.ShipmentId.jsonOrThrow(shipmentId)}`
            ),
            method: "GET",
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.ShipmentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PackagexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PackagexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PackagexApiTimeoutError();
            case "unknown":
                throw new errors.PackagexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
